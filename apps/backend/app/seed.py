"""
Database seed script for Coffee Shop application.
Populates the database with initial categories and coffee items.
"""
import asyncio
from datetime import datetime
from prisma import Prisma
import sys


# Seed data
CATEGORIES = [
    {
        "id": "all",
        "name": "ÊâÄÊúâ",
        "description": "ÊâÄÊúâÂíñÂï°",
        "sortOrder": 0,
        "active": True
    },
    {
        "id": "espresso",
        "name": "ÊµìÁº©ÂíñÂï°",
        "description": "ÊÑèÂºèÊµìÁº©ÂíñÂï°Á≥ªÂàó",
        "sortOrder": 1,
        "active": True
    },
    {
        "id": "filter",
        "name": "ÊâãÂÜ≤ÂíñÂï°",
        "description": "Á≤æÂìÅÊâãÂÜ≤ÂíñÂï°",
        "sortOrder": 2,
        "active": True
    },
    {
        "id": "coldbrew",
        "name": "ÂÜ∑ËêÉÂíñÂï°",
        "description": "ÂÜ∑ËêÉÂíåÂÜ∞ÂíñÂï°",
        "sortOrder": 3,
        "active": True
    },
    {
        "id": "specialty",
        "name": "ÁâπËâ≤È•ÆÂìÅ",
        "description": "ÁâπËâ≤ÂàõÊÑèÂíñÂï°",
        "sortOrder": 4,
        "active": True
    }
]

COFFEE_ITEMS = [
    # Espresso category
    {
        "name": "Âç°Â∏ÉÂ•áËØ∫",
        "description": "ÁªèÂÖ∏ÊÑèÂºèÂíñÂï°ÔºåÂ•∂Ê≥°ÁªµÂØÜÔºåÂ∏¶ÊúâÁÆÄÊòìÂùöÊûúÂë≥",
        "price": 25.00,
        "categoryId": "espresso",
        "available": True,
        "imageUrl": "/images/cappuccino.jpg"
    },
    {
        "name": "ÊãøÈìÅÂíñÂï°",
        "description": "ÊµìÈÉÅÂíñÂï°‰∏é‰∏ùÊªëÁâõÂ•∂ÁöÑÂÆåÁæéËûçÂêà",
        "price": 28.00,
        "categoryId": "espresso",
        "available": True,
        "imageUrl": "/images/latte.jpg"
    },
    {
        "name": "Êë©Âç°ÂíñÂï°",
        "description": "Â∑ßÂÖãÂäõ‰∏éÂíñÂï°ÁöÑÁîúËúúÈÇÇÈÄÖ",
        "price": 30.00,
        "categoryId": "espresso",
        "available": True,
        "imageUrl": "/images/mocha.jpg"
    },
    {
        "name": "ÁÑ¶Á≥ñÁéõÂ•áÊúµ",
        "description": "È¶ôËçâÁ≥ñÊµÜ„ÄÅËí∏Â•∂„ÄÅÊµìÁº©ÂíñÂï°‰∏éÁÑ¶Á≥ñÁöÑÂ±ÇÊ¨°‰∫´Âèó",
        "price": 32.00,
        "categoryId": "espresso",
        "available": True,
        "imageUrl": "/images/caramel-macchiato.jpg"
    },
    {
        "name": "È¶•ËäÆÁôΩ",
        "description": "Êæ≥Ê¥≤ÁªèÂÖ∏ÔºåÂæÆÂ•∂Ê≥°‰∏éÂèå‰ªΩÊµìÁº©ÁöÑÈªÑÈáëÊØî‰æã",
        "price": 26.00,
        "categoryId": "espresso",
        "available": True,
        "imageUrl": "/images/flat-white.jpg"
    },
    
    # Filter coffee category
    {
        "name": "ÊâãÂÜ≤ÂçïÂìÅ",
        "description": "Á≤æÈÄâÂçï‰∏Ä‰∫ßÂú∞ÂíñÂï°Ë±ÜÔºåÊâãÂ∑•ÂÜ≤Ê≥°",
        "price": 35.00,
        "categoryId": "filter",
        "available": True,
        "imageUrl": "/images/pour-over.jpg"
    },
    {
        "name": "ÁæéÂºèÂíñÂï°",
        "description": "ÁªèÂÖ∏ÈªëÂíñÂï°ÔºåÂè£ÊÑüÁ∫ØÂáÄ",
        "price": 22.00,
        "categoryId": "filter",
        "available": True,
        "imageUrl": "/images/americano.jpg"
    },
    
    # Cold brew category
    {
        "name": "ÂÜ∑ËêÉÂíñÂï°",
        "description": "12Â∞èÊó∂‰ΩéÊ∏©ËêÉÂèñÔºåÂè£ÊÑüÈ°∫Êªë",
        "price": 28.00,
        "categoryId": "coldbrew",
        "available": True,
        "imageUrl": "/images/cold-brew.jpg"
    },
    {
        "name": "ÂÜ∞ÊãøÈìÅ",
        "description": "Â§èÊó•Ê∏ÖÂáâ‰πãÈÄâÔºåÊµìÁº©ÂíñÂï°ÈÖçÂÜ∞ÁâõÂ•∂",
        "price": 30.00,
        "categoryId": "coldbrew",
        "available": True,
        "imageUrl": "/images/iced-latte.jpg"
    },
    
    # Specialty category
    {
        "name": "ÊäπËå∂ÊãøÈìÅ",
        "description": "Êó•ÂºèÊäπËå∂Á≤âÈÖçÈ¶ôËçâÁâõÂ•∂",
        "price": 32.00,
        "categoryId": "specialty",
        "available": True,
        "imageUrl": "/images/matcha-latte.jpg"
    },
    {
        "name": "ËäãÂ§¥ÊãøÈìÅ",
        "description": "Á¥´Ëâ≤Ê¢¶ÂπªÔºåËäãÂ§¥‰∏éÂíñÂï°ÁöÑÂàõÊÑèÁªìÂêà",
        "price": 30.00,
        "categoryId": "specialty",
        "available": True,
        "imageUrl": "/images/taro-latte.jpg"
    },
    {
        "name": "Á∫¢Ëâ≤Â§©ÈπÖÁªíÊãøÈìÅ",
        "description": "Á∫¢‰∏ùÁªíËõãÁ≥ïÈ£éÂë≥ÔºåÈÖçÊúâÂ∑ßÂÖãÂäõ",
        "price": 34.00,
        "categoryId": "specialty",
        "available": True,
        "imageUrl": "/images/red-velvet-latte.jpg"
    }
]


async def clear_database(db: Prisma):
    """Clear existing data from database."""
    print("üóëÔ∏è  Clearing existing data...")
    
    # Delete in order to respect foreign key constraints
    await db.review.delete_many()
    await db.orderitem.delete_many()
    await db.payment.delete_many()
    await db.order.delete_many()
    await db.rewards.delete_many()
    await db.coffee.delete_many()
    await db.category.delete_many()
    await db.user.delete_many()
    
    print("‚úÖ Database cleared")


async def seed_categories(db: Prisma):
    """Seed categories."""
    print("\nüìÅ Seeding categories...")
    
    for category in CATEGORIES:
        existing = await db.category.find_unique(where={"id": category["id"]})
        if not existing:
            await db.category.create(data=category)
            print(f"  ‚úÖ Created category: {category['name']}")
        else:
            print(f"  ‚è≠Ô∏è  Category already exists: {category['name']}")
    
    print(f"‚úÖ Seeded {len(CATEGORIES)} categories")


async def seed_coffee_items(db: Prisma):
    """Seed coffee items."""
    print("\n‚òï Seeding coffee items...")
    
    created_count = 0
    for item in COFFEE_ITEMS:
        # Check if item already exists
        existing = await db.coffee.find_first(
            where={
                "name": item["name"],
                "categoryId": item["categoryId"]
            }
        )
        
        if not existing:
            await db.coffee.create(data=item)
            print(f"  ‚úÖ Created coffee: {item['name']} - ¬•{item['price']}")
            created_count += 1
        else:
            print(f"  ‚è≠Ô∏è  Coffee already exists: {item['name']}")
    
    print(f"‚úÖ Seeded {created_count} new coffee items")


async def print_summary(db: Prisma):
    """Print summary of seeded data."""
    print("\nüìä Database Summary:")
    
    # Count records
    category_count = await db.category.count()
    coffee_count = await db.coffee.count()
    
    print(f"  - Categories: {category_count}")
    print(f"  - Coffee Items: {coffee_count}")
    
    # Show sample items by category
    print("\nüìã Sample items by category:")
    categories = await db.category.find_many(order={"sortOrder": "asc"})
    
    for category in categories:
        if category.id == "all":
            continue
            
        coffees = await db.coffee.find_many(
            where={"categoryId": category.id},
            take=2
        )
        
        if coffees:
            print(f"\n  {category.name}:")
            for coffee in coffees:
                print(f"    - {coffee.name}: ¬•{coffee.price}")


async def main():
    """Main seed function."""
    print("üå± Starting Coffee Shop Database Seed")
    print("=" * 50)
    
    # Connect to database
    db = Prisma()
    await db.connect()
    
    try:
        # Ask user if they want to clear existing data
        if len(sys.argv) > 1 and sys.argv[1] == "--clear":
            await clear_database(db)
        
        # Seed data
        await seed_categories(db)
        await seed_coffee_items(db)
        
        # Print summary
        await print_summary(db)
        
        print("\n‚ú® Database seeding completed successfully!")
        
    except Exception as e:
        print(f"\n‚ùå Error during seeding: {str(e)}")
        raise
    finally:
        await db.disconnect()


if __name__ == "__main__":
    asyncio.run(main())